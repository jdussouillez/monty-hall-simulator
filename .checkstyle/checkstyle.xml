<?xml version="1.0"?>
<!DOCTYPE module PUBLIC "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN" "https://checkstyle.org/dtds/configuration_1_3.dtd">

<module name="Checker">
    <property name="charset" value="UTF-8"/>

    <property name="severity" value="error"/>

    <module name="SuppressWithPlainTextCommentFilter"/>
    <module name="SuppressionFilter">
        <property name="file" value="${suppressionsFile}"/>
    </module>

    <property name="fileExtensions" value="java, properties, xml"/>
    <module name="BeforeExecutionExclusionFileFilter">
        <property name="fileNamePattern" value="module\-info\.java$"/>
    </module>
    <module name="FileTabCharacter">
        <property name="eachLine" value="true"/>
    </module>
    <module name="NewlineAtEndOfFile">
        <property name="lineSeparator" value="lf"/>
    </module>
    <module name="UniqueProperties"/>
    <module name="FileLength"/>
    <module name="LineLength">
        <property name="fileExtensions" value="java"/>
        <property name="max" value="120"/>
        <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
    </module>

    <module name="TreeWalker">
        <module name="OuterTypeFilename"/>
        <module name="OuterTypeNumber"/>
        <module name="ConstantName">
            <property name="format" value="^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"/>
        </module>
        <module name="IllegalType">
            <property
                name="illegalClassNames"
                value="Hashtable, Vector"
            />
        </module>
        <module name="InnerTypeLast"/>
        <module name="IllegalToken"/>
        <module name="IllegalTokenText">
            <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
            <property
                name="format"
                value="\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
            <property
                name="message"
                value="Consider using special escape sequence instead of octal value or Unicode escaped value."/>
        </module>
        <module name="AvoidEscapedUnicodeCharacters">
            <property name="allowEscapesForControlCharacters" value="true"/>
            <property name="allowByTailComment" value="true"/>
            <property name="allowNonPrintableEscapes" value="true"/>
        </module>
        <module name="AvoidNestedBlocks">
            <property name="allowInSwitchCase" value="true"/>
        </module>
        <module name="NestedForDepth">
            <property name="max" value="2"/>
        </module>
        <module name="NestedIfDepth">
            <property name="max" value="2"/>
        </module>
        <module name="NestedTryDepth">
            <property name="max" value="2"/>
        </module>
        <module name="AvoidNoArgumentSuperConstructorCall"/>
        <module name="AvoidStaticImport">
            <property
                name="excludes"
                value="org.junit.jupiter.api.Assertions.*,
                    org.junit.jupiter.api.Assumptions.*"
            />
        </module>
        <module name="AvoidStarImport"/>
        <module name="BooleanExpressionComplexity">
            <property name="max" value="5"/>
        </module>
        <module name="OneTopLevelClass"/>
        <module name="HideUtilityClassConstructor"/>
        <module name="NoLineWrap"/>
        <module name="EmptyBlock">
            <property name="option" value="TEXT"/>
            <property name="tokens" value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"/>
        </module>
        <module name="NeedBraces"/>
        <module name="LeftCurly"/>
        <module name="RightCurly">
            <property name="id" value="RightCurlySame"/>
            <property
                name="tokens"
                value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_DO"/>
        </module>
        <module name="RightCurly">
            <property name="id" value="RightCurlyAlone"/>
            <property name="option" value="alone"/>
            <property
                name="tokens"
                value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT, INSTANCE_INIT"/>
        </module>
        <module name="WhitespaceAfter">
            <property
                name="tokens"
                value="COMMA, SEMI, TYPECAST, LITERAL_IF, LITERAL_ELSE, LITERAL_WHILE, LITERAL_DO, LITERAL_FOR,
                    DO_WHILE"/>
        </module>
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyLambdas" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
            <property name="allowEmptyTypes" value="true"/>
            <property name="allowEmptyLoops" value="true"/>
        </module>
        <module name="OneStatementPerLine"/>
        <module name="MultipleVariableDeclarations"/>
        <module name="VariableDeclarationUsageDistance">
            <property name="allowedDistance" value="3"/>
        </module>
        <module name="MultipleStringLiterals">
            <property name="allowedDuplicates" value="5"/>
        </module>
        <module name="ModifiedControlVariable"/>
        <module name="ArrayTypeStyle"/>
        <module name="DefaultComesLast"/>
        <module name="FallThrough"/>
        <module name="UpperEll"/>
        <module name="VisibilityModifier">
            <property name="protectedAllowed" value="true"/>
        </module>
        <module name="ModifierOrder"/>
        <module name="EmptyLineSeparator">
            <property name="allowMultipleEmptyLines" value="false"/>
            <property name="allowMultipleEmptyLinesInsideClassMembers" value="false"/>
            <property name="allowNoEmptyLineBetweenFields" value="false"/>
        </module>
        <module name="EmptyStatement"/>
        <module name="HiddenField">
            <property name="ignoreConstructorParameter" value="true"/>
            <property name="ignoreSetter" value="true"/>
            <property name="setterCanReturnItsClass" value="true"/>
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapDot"/>
            <property name="tokens" value="DOT"/>
            <property name="option" value="nl"/>
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapComma"/>
            <property name="tokens" value="COMMA"/>
            <property name="option" value="EOL"/>
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapEllipsis"/>
            <property name="tokens" value="ELLIPSIS"/>
            <property name="option" value="EOL"/>
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapArrayDeclarator"/>
            <property name="tokens" value="ARRAY_DECLARATOR"/>
            <property name="option" value="EOL"/>
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapMethodRef"/>
            <property name="tokens" value="METHOD_REF"/>
            <property name="option" value="nl"/>
        </module>
        <module name="PackageDeclaration"/>
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
        </module>
        <module name="TypeName"/>
        <module name="MemberName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
        </module>
        <module name="ParameterAssignment"/>
        <module name="ParameterName">
            <property name="format" value="^[a-z]([a-zA-Z0-9]*)?$"/>
        </module>
        <module name="ParameterNumber"/>
        <module name="RecordComponentName">
            <property name="format" value="^[a-z]([a-zA-Z0-9]*)?$"/>
        </module>
        <module name="LambdaParameterName">
            <property name="format" value="^[a-z]([a-zA-Z0-9]*)?$"/>
        </module>
        <module name="LambdaBodyLength">
            <property name="max" value="100"/>
        </module>
        <module name="CatchParameterName">
            <property name="format" value="(ex|error|thr|[a-z][a-zA-Z]+(Ex|Exception|Error))$"/>
        </module>
        <module name="MethodCount"/>
        <module name="MethodLength"/>
        <module name="MethodTypeParameterName"/>
        <module name="FinalClass"/>
        <module name="FinalParameters"/>
        <module name="LocalVariableName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
        </module>
        <module name="LocalFinalVariableName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
        </module>
        <module name="StaticVariableName"/>
        <module name="ClassTypeParameterName">
            <property name="format" value="^[A-Z][0-9]?$"/>
        </module>
        <module name="MethodTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
        </module>
        <module name="PatternVariableName">
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
        </module>
        <module name="InterfaceIsType"/>
        <module name="InterfaceTypeParameterName">
            <property name="format" value="^[A-Z][0-9]?$"/>
        </module>
        <module name="ClassMemberImpliedModifier"/>
        <module name="NoFinalizer"/>
        <module name="GenericWhitespace"/>
        <module name="Indentation">
            <property name="severity" value="error"/>
            <property name="basicOffset" value="4"/>
            <property name="braceAdjustment" value="0"/>
            <property name="caseIndent" value="4"/>
            <property name="throwsIndent" value="4"/>
            <property name="lineWrappingIndentation" value="4"/>
            <property name="arrayInitIndent" value="4"/>
        </module>
        <module name="AbbreviationAsWordInName">
            <property name="ignoreFinal" value="false"/>
            <property name="allowedAbbreviationLength" value="6"/>
        </module>
        <module name="AbstractClassName">
            <property name="format" value="^(?!Abstract).+$"/>
            <property name="ignoreModifier" value="true"/>
        </module>
        <module name="DeclarationOrder"/>
        <!--
        Group are disabled otherwise the scope order is not respected anymore (public/protected/private)
        <module name="OverloadMethodsDeclarationOrder"/>
        -->
        <module name="CustomImportOrder">
            <property name="sortImportsInGroupAlphabetically" value="true"/>
            <property name="separateLineBetweenGroups" value="false"/>
        </module>
        <module name="RedundantImport"/>
        <!-- Disabled because it conflicts with ClassMemberImpliedModifier -->
        <!-- <module name="RedundantModifier"/> -->
        <module name="UnusedImports"/>
        <module name="UnusedLocalVariable"/>
        <module name="MethodParamPad"/>
        <module name="NoWhitespaceBefore">
            <property name="tokens" value="COMMA, SEMI, POST_INC, POST_DEC, DOT, ELLIPSIS, METHOD_REF"/>
            <property name="allowLineBreaks" value="true"/>
        </module>
        <module name="NoWhitespaceBeforeCaseDefaultColon"/>
        <module name="ParenPad"/>
        <module name="TypecastParenPad"/>
        <module name="OperatorWrap">
            <property name="option" value="NL"/>
            <property
                name="tokens"
                value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD,
                    NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR, METHOD_REF "/>
        </module>
        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationMostCases"/>
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF"/>
        </module>
        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationVariables"/>
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="allowSamelineMultipleAnnotations" value="true"/>
        </module>
        <module name="AnnotationUseStyle">
            <property name="elementStyle" value="compact"/>
            <property name="trailingArrayComma" value="ignore"/>
            <property name="closingParens" value="never"/>
        </module>
        <module name="AvoidDoubleBraceInitialization"/>
        <module name="MissingOverride"/>
        <module name="MissingDeprecated"/>
        <module name="NonEmptyAtclauseDescription"/>
        <module name="InvalidJavadocPosition"/>
        <module name="JavadocType"/>
        <module name="JavadocVariable"/>
        <module name="JavadocBlockTagLocation"/>
        <module name="SummaryJavadoc">
            <property
                name="forbiddenSummaryFragments"
                value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )"/>
            <property name="period" value=""/>
        </module>
        <module name="JavadocParagraph"/>
        <module name="JavadocTagContinuationIndentation">
            <property name="offset" value="0"/>
        </module>
        <module name="JavadocMissingLeadingAsterisk"/>
        <module name="AtclauseOrder">
            <property name="tagOrder" value="@param, @return, @throws, @see, @since, @deprecated"/>
        </module>
        <module name="JavadocMethod">
            <property name="allowedAnnotations" value="Override"/>
            <property name="validateThrows" value="true"/>
        </module>
        <module name="MissingJavadocType">
            <property name="scope" value="private"/>
        </module>
        <module name="MissingJavadocMethod">
            <property name="scope" value="private"/>
            <property name="allowedAnnotations" value="Override, Test, BeforeEach, AfterEach, BeforeAll, AfterAll"/>
        </module>
        <module name="RequireEmptyLineBeforeBlockTagGroup"/>
        <module name="JavadocContentLocation"/>
        <module name="InvalidJavadocPosition"/>
        <module name="MethodName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9_]*$"/>
        </module>
        <module name="SingleLineJavadoc">
            <property name="ignoreInlineTags" value="false"/>
        </module>
        <module name="SingleSpaceSeparator"/>
        <module name="JavadocMissingWhitespaceAfterAsterisk"/>
        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="expected"/>
        </module>
        <module name="RecordComponentNumber"/>
        <module name="RecordComponentName"/>
        <module name="RecordTypeParameterName"/>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
        <module name="ReturnCount">
            <property name="max" value="5"/>
            <property name="maxForVoid" value="5"/>
        </module>
        <module name="StringLiteralEquality"/>
        <module name="CommentsIndentation"/>
        <module name="TodoComment">
            <property name="severity" value="warning"/>
            <property name="format" value="(TODO:)|(FIXME:)|(OPTIMIZE:)"/>
        </module>
        <module name="ThrowsCount"/>
        <module name="CovariantEquals"/>
        <module name="EqualsHashCode"/>
        <module name="InnerAssignment"/>
        <module name="UnnecessaryParentheses"/>
        <module name="UnnecessarySemicolonAfterOuterTypeDeclaration"/>
        <module name="UnnecessarySemicolonAfterTypeMemberDeclaration"/>
        <module name="UnnecessarySemicolonInEnumeration"/>
        <module name="UnnecessarySemicolonInTryWithResources"/>
        <module name="IllegalCatch">
            <property
                name="illegalClassNames"
                value="Error, Exception, OutOfMemoryError, Throwable"/>
        </module>
        <module name="IllegalIdentifierName"/>
        <module name="IllegalInstantiation">
            <property
                name="classes"
                value="java.lang.Boolean,
                    java.lang.Boolean[],
                    java.lang.Byte,
                    java.lang.Byte[],
                    java.lang.Character,
                    java.lang.Character[],
                    java.lang.Double,
                    java.lang.Double[],
                    java.lang.Float,
                    java.lang.Float[],
                    java.lang.Integer,
                    java.lang.Integer[],
                    java.lang.Long,
                    java.lang.Long[],
                    java.lang.Short,
                    java.lang.Short[]"
            />
        </module>
        <module name="IllegalImport">
            <property name="severity" value="error"/>
            <property name="regexp" value="true"/>
            <property name="illegalPkgs" value="^sun, ^junit, ^com\.mashape\.unirest"/>
            <property
                name="illegalClasses"
                value="^org\.junit\.(Assert|Before|BeforeClass|After|AfterClass|Test),
                    ^lombok\.experimental\.Accessors,
                    ^java\.util\.(Date|Calendar),
                    ^org\.junit\.jupiter\.api\.Assertions"
            />
        </module>
        <module name="IllegalThrows">
            <property
                name="illegalClassNames"
                value="ArithmeticException,
                    ClassCastException,
                    Error,
                    IllegalArgumentException,
                    IllegalStateException,
                    IndexOutOfBoundsException,
                    NullPointerException,
                    RuntimeException,
                    SecurityException,
                    Throwable
            "/>
        </module>
        <module name="IllegalThrows"/>
        <module name="NoCodeInFile"/>
        <module name="NoClone"/>
        <!-- Forbid "printStackTrace" calls -->
        <module name="RegexpSinglelineJava">
            <property name="format" value="\.printStackTrace\(\)"/>
            <property name="message" value="Calls to printStackTrace are forbidden. Rethow or handle the exception."/>
            <property name="ignoreComments" value="true"/>
        </module>
        <!-- Forbid "println" calls and similar methods -->
        <module name="RegexpSinglelineJava">
            <property name="format" value="System\.(out|err)\.print(ln)?"/>
            <property name="message" value="Calls to System streams are forbidden. Use a logger instead."/>
            <property name="ignoreComments" value="true"/>
        </module>
        <!-- Forbid "peek" calls on streams -->
        <module name="RegexpSinglelineJava">
            <property name="format" value="\.peek\("/>
            <property name="message" value="Calls to Stream::peek are forbidden. Use Stream::map instead."/>
            <property name="ignoreComments" value="true"/>
        </module>

        <!-- Sevntu checkstyle (non standards rules) -->
        <!-- http://sevntu-checkstyle.github.io/sevntu.checkstyle/ -->
        <module name="ForbidCCommentsInMethods"/>
        <module name="ReturnNullInsteadOfBoolean"/>
        <module name="UselessSingleCatch"/>
        <module name="PreferMethodReference"/>
        <module name="CustomDeclarationOrder">
            <property
                name="customDeclarationOrder"
                value="Field(public static final .*)
                    ### Field(protected static final .*)
                    ### Field(private static final .*)
                    ### Field(public static(?! final) .*)
                    ### Field(protected static(?! final) .*)
                    ### Field(private static(?! final) .*)
                    ### Field(public(?! static final) .*)
                    ### Field(protected(?! static final) .*)
                    ### Field(private(?! static final) .*)
                    ### Field(.*)
                    ### Ctor(public)
                    ### Ctor(protected)
                    ### Ctor(private)
                    ### Ctor(.*)
                    ### Method(public abstract .*)
                    ### Method(@GET.*public .*)
                    ### Method(@HEAD.*public .*)
                    ### Method(@POST.*public .*)
                    ### Method(@PUT.*public .*)
                    ### Method(@PATCH.*public .*)
                    ### Method(@DELETE.* public .*)
                    ### Method(public(?! static) .*)
                    ### Method(@Override.*public .*)
                    ### Method(equals)
                    ### Method(hashCode)
                    ### Method(compareTo)
                    ### Method(toString)
                    ### Method(protected abstract .*)
                    ### Method(protected(?! static) .*)
                    ### Method(@Override.*protected .*)
                    ### Method(private abstract .*)
                    ### Method(private(?! static) .*)
                    ### Method(@Override.*private .*)
                    ### MainMethod(.*)
                    ### Method(public static .*)
                    ### Method(protected static .*)
                    ### Method(private static .*)
                    ### InnerInterface(public .*)
                    ### InnerInterface(protected .*)
                    ### InnerInterface(private .*)
                    ### InnerClass(public .*)
                    ### InnerClass(protected .*)
                    ### InnerClass(private .*)
                    ### InnerEnum(public .*)
                    ### InnerEnum(protected .*)
                    ### InnerEnum(private .*)"
            />
        </module>
    </module>
</module>
